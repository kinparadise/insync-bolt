import React, { useState } from 'react';
import { View, StyleSheet, TouchableOpacity, Text, Modal, ScrollView, Share, Alert } from 'react-native';
import { Clock, Users, Mic, Video, MessageCircle, Download, Share as ShareIcon, X, Mail, Calendar, FileText, TrendingUp, Award, Eye } from 'lucide-react-native';
import { useTheme } from '@/contexts/ThemeContext';

interface MeetingSummaryProps {
  visible: boolean;
  onClose: () => void;
  meetingData: MeetingData;
}

interface Participant {
  id: string;
  name: string;
  email: string;
  joinTime: Date;
  leaveTime: Date;
  totalDuration: number; // in minutes
  speakingTime: number; // in minutes
  cameraOnTime: number; // in minutes
  micOnTime: number; // in minutes
  messagesCount: number;
  engagementScore: number; // 0-100
  avatar: string;
}

interface MeetingData {
  id: string;
  title: string;
  startTime: Date;
  endTime: Date;
  totalDuration: number; // in minutes
  hostName: string;
  participants: Participant[];
  totalMessages: number;
  recordingUrl?: string;
  transcriptUrl?: string;
  keyTopics: string[];
  actionItems: string[];
  decisions: string[];
  nextMeetingScheduled?: Date;
}

export function MeetingSummaryComponent({ visible, onClose, meetingData }: MeetingSummaryProps) {
  const { theme } = useTheme();
  const [activeTab, setActiveTab] = useState<'overview' | 'participants' | 'insights' | 'actions'>('overview');

  const formatDuration = (minutes: number): string => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const formatTime = (date: Date): string => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const getEngagementLevel = (score: number): { label: string; color: string } => {
    if (score >= 80) return { label: 'Highly Engaged', color: theme.colors.success };
    if (score >= 60) return { label: 'Engaged', color: theme.colors.warning };
    if (score >= 40) return { label: 'Moderately Engaged', color: '#FF9800' };
    return { label: 'Low Engagement', color: theme.colors.error };
  };

  const calculateAverageEngagement = (): number => {
    const total = meetingData.participants.reduce((sum, p) => sum + p.engagementScore, 0);
    return Math.round(total / meetingData.participants.length);
  };

  const getMostActiveParticipant = (): Participant => {
    return meetingData.participants.reduce((prev, current) => 
      prev.engagementScore > current.engagementScore ? prev : current
    );
  };

  const handleShareSummary = async () => {
    const summaryText = `
Meeting Summary: ${meetingData.title}
Duration: ${formatDuration(meetingData.totalDuration)}
Participants: ${meetingData.participants.length}
Host: ${meetingData.hostName}
Date: ${meetingData.startTime.toLocaleDateString()}

Key Highlights:
- Average Engagement: ${calculateAverageEngagement()}%
- Total Messages: ${meetingData.totalMessages}
- Action Items: ${meetingData.actionItems.length}

Generated by InSync
    `;

    try {
      await Share.share({
        message: summaryText,
        title: 'Meeting Summary',
      });
    } catch (error) {
      Alert.alert('Error', 'Failed to share meeting summary');
    }
  };

  const handleEmailSummary = () => {
    // In a real app, this would send email to all participants
    Alert.alert('Email Sent', 'Meeting summary has been sent to all participants');
  };

  const handleDownloadReport = () => {
    // In a real app, this would generate and download a PDF report
    Alert.alert('Download Started', 'Meeting report is being generated and will be downloaded shortly');
  };

  const renderOverviewTab = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      {/* Meeting Info Card */}
      <View style={styles.summaryCard}>
        <View style={styles.cardHeader}>
          <Clock size={20} color={theme.colors.primary} />
          <Text style={styles.cardTitle}>Meeting Overview</Text>
        </View>
        <View style={styles.overviewGrid}>
          <View style={styles.overviewItem}>
            <Text style={styles.overviewLabel}>Duration</Text>
            <Text style={styles.overviewValue}>{formatDuration(meetingData.totalDuration)}</Text>
          </View>
          <View style={styles.overviewItem}>
            <Text style={styles.overviewLabel}>Start Time</Text>
            <Text style={styles.overviewValue}>{formatTime(meetingData.startTime)}</Text>
          </View>
          <View style={styles.overviewItem}>
            <Text style={styles.overviewLabel}>End Time</Text>
            <Text style={styles.overviewValue}>{formatTime(meetingData.endTime)}</Text>
          </View>
          <View style={styles.overviewItem}>
            <Text style={styles.overviewLabel}>Participants</Text>
            <Text style={styles.overviewValue}>{meetingData.participants.length}</Text>
          </View>
        </View>
      </View>

      {/* Engagement Summary */}
      <View style={styles.summaryCard}>
        <View style={styles.cardHeader}>
          <TrendingUp size={20} color={theme.colors.primary} />
          <Text style={styles.cardTitle}>Engagement Summary</Text>
        </View>
        <View style={styles.engagementStats}>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>{calculateAverageEngagement()}%</Text>
            <Text style={styles.statLabel}>Average Engagement</Text>
          </View>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>{meetingData.totalMessages}</Text>
            <Text style={styles.statLabel}>Total Messages</Text>
          </View>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>{Math.round(meetingData.participants.reduce((sum, p) => sum + p.speakingTime, 0))}m</Text>
            <Text style={styles.statLabel}>Total Speaking</Text>
          </View>
        </View>
      </View>

      {/* Key Topics */}
      {meetingData.keyTopics.length > 0 && (
        <View style={styles.summaryCard}>
          <View style={styles.cardHeader}>
            <MessageCircle size={20} color={theme.colors.primary} />
            <Text style={styles.cardTitle}>Key Topics Discussed</Text>
          </View>
          <View style={styles.topicsList}>
            {meetingData.keyTopics.map((topic, index) => (
              <View key={index} style={styles.topicItem}>
                <Text style={styles.topicText}>â€¢ {topic}</Text>
              </View>
            ))}
          </View>
        </View>
      )}

      {/* Quick Actions */}
      <View style={styles.summaryCard}>
        <View style={styles.cardHeader}>
          <FileText size={20} color={theme.colors.primary} />
          <Text style={styles.cardTitle}>Meeting Resources</Text>
        </View>
        <View style={styles.resourcesList}>
          {meetingData.recordingUrl && (
            <TouchableOpacity style={styles.resourceItem}>
              <Video size={16} color={theme.colors.primary} />
              <Text style={styles.resourceText}>View Recording</Text>
            </TouchableOpacity>
          )}
          {meetingData.transcriptUrl && (
            <TouchableOpacity style={styles.resourceItem}>
              <FileText size={16} color={theme.colors.primary} />
              <Text style={styles.resourceText}>Download Transcript</Text>
            </TouchableOpacity>
          )}
          <TouchableOpacity style={styles.resourceItem} onPress={handleDownloadReport}>
            <Download size={16} color={theme.colors.primary} />
            <Text style={styles.resourceText}>Download Full Report</Text>
          </TouchableOpacity>
        </View>
      </View>
    </ScrollView>
  );

  const renderParticipantsTab = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      <View style={styles.participantsList}>
        {meetingData.participants.map((participant) => {
          const engagement = getEngagementLevel(participant.engagementScore);
          return (
            <View key={participant.id} style={styles.participantCard}>
              <View style={styles.participantHeader}>
                <View style={styles.participantInfo}>
                  <Text style={styles.participantName}>{participant.name}</Text>
                  <Text style={styles.participantEmail}>{participant.email}</Text>
                </View>
                <View style={styles.engagementBadge}>
                  <View style={[styles.engagementDot, { backgroundColor: engagement.color }]} />
                  <Text style={[styles.engagementText, { color: engagement.color }]}>
                    {participant.engagementScore}%
                  </Text>
                </View>
              </View>
              
              <View style={styles.participantStats}>
                <View style={styles.statRow}>
                  <View style={styles.statColumn}>
                    <Clock size={14} color={theme.colors.textSecondary} />
                    <Text style={styles.statText}>Duration: {formatDuration(participant.totalDuration)}</Text>
                  </View>
                  <View style={styles.statColumn}>
                    <Mic size={14} color={theme.colors.textSecondary} />
                    <Text style={styles.statText}>Speaking: {formatDuration(participant.speakingTime)}</Text>
                  </View>
                </View>
                <View style={styles.statRow}>
                  <View style={styles.statColumn}>
                    <Video size={14} color={theme.colors.textSecondary} />
                    <Text style={styles.statText}>Camera: {formatDuration(participant.cameraOnTime)}</Text>
                  </View>
                  <View style={styles.statColumn}>
                    <MessageCircle size={14} color={theme.colors.textSecondary} />
                    <Text style={styles.statText}>Messages: {participant.messagesCount}</Text>
                  </View>
                </View>
              </View>
              
              <View style={styles.participantTimes}>
                <Text style={styles.timeText}>
                  Joined: {formatTime(participant.joinTime)} â€¢ Left: {formatTime(participant.leaveTime)}
                </Text>
              </View>
            </View>
          );
        })}
      </View>
    </ScrollView>
  );

  const renderInsightsTab = () => {
    const mostActive = getMostActiveParticipant();
    const avgSpeakingTime = Math.round(
      meetingData.participants.reduce((sum, p) => sum + p.speakingTime, 0) / meetingData.participants.length
    );

    return (
      <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
        {/* Top Performer */}
        <View style={styles.summaryCard}>
          <View style={styles.cardHeader}>
            <Award size={20} color={theme.colors.primary} />
            <Text style={styles.cardTitle}>Top Performer</Text>
          </View>
          <View style={styles.topPerformer}>
            <Text style={styles.performerName}>{mostActive.name}</Text>
            <Text style={styles.performerScore}>{mostActive.engagementScore}% Engagement</Text>
            <Text style={styles.performerDetails}>
              {formatDuration(mostActive.speakingTime)} speaking time â€¢ {mostActive.messagesCount} messages
            </Text>
          </View>
        </View>

        {/* Meeting Insights */}
        <View style={styles.summaryCard}>
          <View style={styles.cardHeader}>
            <Eye size={20} color={theme.colors.primary} />
            <Text style={styles.cardTitle}>Meeting Insights</Text>
          </View>
          <View style={styles.insightsList}>
            <View style={styles.insightItem}>
              <Text style={styles.insightLabel}>Average Speaking Time</Text>
              <Text style={styles.insightValue}>{formatDuration(avgSpeakingTime)}</Text>
            </View>
            <View style={styles.insightItem}>
              <Text style={styles.insightLabel}>Most Active Period</Text>
              <Text style={styles.insightValue}>First 30 minutes</Text>
            </View>
            <View style={styles.insightItem}>
              <Text style={styles.insightLabel}>Camera Usage</Text>
              <Text style={styles.insightValue}>
                {Math.round((meetingData.participants.reduce((sum, p) => sum + p.cameraOnTime, 0) / 
                (meetingData.participants.length * meetingData.totalDuration)) * 100)}%
              </Text>
            </View>
            <View style={styles.insightItem}>
              <Text style={styles.insightLabel}>Participation Rate</Text>
              <Text style={styles.insightValue}>{calculateAverageEngagement()}%</Text>
            </View>
          </View>
        </View>

        {/* Recommendations */}
        <View style={styles.summaryCard}>
          <View style={styles.cardHeader}>
            <TrendingUp size={20} color={theme.colors.primary} />
            <Text style={styles.cardTitle}>Recommendations</Text>
          </View>
          <View style={styles.recommendationsList}>
            <Text style={styles.recommendationItem}>
              â€¢ Consider shorter meetings for better engagement
            </Text>
            <Text style={styles.recommendationItem}>
              â€¢ Encourage more participation from quiet members
            </Text>
            <Text style={styles.recommendationItem}>
              â€¢ Use breakout rooms for larger discussions
            </Text>
          </View>
        </View>
      </ScrollView>
    );
  };

  const renderActionsTab = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      {/* Action Items */}
      {meetingData.actionItems.length > 0 && (
        <View style={styles.summaryCard}>
          <View style={styles.cardHeader}>
            <FileText size={20} color={theme.colors.primary} />
            <Text style={styles.cardTitle}>Action Items</Text>
          </View>
          <View style={styles.actionsList}>
            {meetingData.actionItems.map((item, index) => (
              <View key={index} style={styles.actionItem}>
                <Text style={styles.actionText}>â€¢ {item}</Text>
              </View>
            ))}
          </View>
        </View>
      )}

      {/* Decisions Made */}
      {meetingData.decisions.length > 0 && (
        <View style={styles.summaryCard}>
          <View style={styles.cardHeader}>
            <Award size={20} color={theme.colors.primary} />
            <Text style={styles.cardTitle}>Decisions Made</Text>
          </View>
          <View style={styles.decisionsList}>
            {meetingData.decisions.map((decision, index) => (
              <View key={index} style={styles.decisionItem}>
                <Text style={styles.decisionText}>â€¢ {decision}</Text>
              </View>
            ))}
          </View>
        </View>
      )}

      {/* Next Meeting */}
      {meetingData.nextMeetingScheduled && (
        <View style={styles.summaryCard}>
          <View style={styles.cardHeader}>
            <Calendar size={20} color={theme.colors.primary} />
            <Text style={styles.cardTitle}>Next Meeting</Text>
          </View>
          <View style={styles.nextMeeting}>
            <Text style={styles.nextMeetingText}>
              Scheduled for {meetingData.nextMeetingScheduled.toLocaleDateString()} at{' '}
              {formatTime(meetingData.nextMeetingScheduled)}
            </Text>
          </View>
        </View>
      )}
    </ScrollView>
  );

  const styles = createStyles(theme);

  return (
    <Modal
      visible={visible}
      transparent={false}
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity onPress={onClose} style={styles.closeButton}>
            <X size={24} color={theme.colors.text} />
          </TouchableOpacity>
          <Text style={styles.title}>Meeting Summary</Text>
          <View style={styles.headerActions}>
            <TouchableOpacity onPress={handleEmailSummary} style={styles.headerButton}>
              <Mail size={20} color={theme.colors.primary} />
            </TouchableOpacity>
            <TouchableOpacity onPress={handleShareSummary} style={styles.headerButton}>
              <ShareIcon size={20} color={theme.colors.primary} />
            </TouchableOpacity>
          </View>
        </View>

        {/* Meeting Title */}
        <View style={styles.meetingHeader}>
          <Text style={styles.meetingTitle}>{meetingData.title}</Text>
          <Text style={styles.meetingSubtitle}>
            {meetingData.startTime.toLocaleDateString()} â€¢ Hosted by {meetingData.hostName}
          </Text>
        </View>

        {/* Tab Navigation */}
        <View style={styles.tabNavigation}>
          <TouchableOpacity
            style={[styles.tabButton, activeTab === 'overview' && styles.tabButtonActive]}
            onPress={() => setActiveTab('overview')}
          >
            <Text style={[styles.tabButtonText, activeTab === 'overview' && styles.tabButtonTextActive]}>
              Overview
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tabButton, activeTab === 'participants' && styles.tabButtonActive]}
            onPress={() => setActiveTab('participants')}
          >
            <Text style={[styles.tabButtonText, activeTab === 'participants' && styles.tabButtonTextActive]}>
              Participants
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tabButton, activeTab === 'insights' && styles.tabButtonActive]}
            onPress={() => setActiveTab('insights')}
          >
            <Text style={[styles.tabButtonText, activeTab === 'insights' && styles.tabButtonTextActive]}>
              Insights
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tabButton, activeTab === 'actions' && styles.tabButtonActive]}
            onPress={() => setActiveTab('actions')}
          >
            <Text style={[styles.tabButtonText, activeTab === 'actions' && styles.tabButtonTextActive]}>
              Actions
            </Text>
          </TouchableOpacity>
        </View>

        {/* Tab Content */}
        <View style={styles.content}>
          {activeTab === 'overview' && renderOverviewTab()}
          {activeTab === 'participants' && renderParticipantsTab()}
          {activeTab === 'insights' && renderInsightsTab()}
          {activeTab === 'actions' && renderActionsTab()}
        </View>
      </View>
    </Modal>
  );
}

const createStyles = (theme: any) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    paddingTop: 5,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  closeButton: {
    padding: 8,
  },
  title: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    color: theme.colors.text,
  },
  headerActions: {
    flexDirection: 'row',
    gap: 8,
  },
  headerButton: {
    backgroundColor: theme.colors.card,
    borderRadius: 8,
    padding: 8,
  },
  meetingHeader: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  meetingTitle: {
    fontSize: 20,
    fontFamily: 'Inter-Bold',
    color: theme.colors.text,
    marginBottom: 4,
  },
  meetingSubtitle: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: theme.colors.textSecondary,
  },
  tabNavigation: {
    flexDirection: 'row',
    backgroundColor: theme.colors.surface,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  tabButton: {
    flex: 1,
    paddingVertical: 16,
    alignItems: 'center',
    borderBottomWidth: 2,
    borderBottomColor: 'transparent',
  },
  tabButtonActive: {
    borderBottomColor: theme.colors.primary,
  },
  tabButtonText: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: theme.colors.textSecondary,
  },
  tabButtonTextActive: {
    color: theme.colors.primary,
    fontFamily: 'Inter-SemiBold',
  },
  content: {
    flex: 1,
  },
  tabContent: {
    flex: 1,
    padding: 20,
  },
  summaryCard: {
    backgroundColor: theme.colors.card,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    gap: 8,
  },
  cardTitle: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: theme.colors.text,
  },
  overviewGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 16,
  },
  overviewItem: {
    flex: 1,
    minWidth: '45%',
  },
  overviewLabel: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: theme.colors.textSecondary,
    marginBottom: 4,
  },
  overviewValue: {
    fontSize: 18,
    fontFamily: 'Inter-Bold',
    color: theme.colors.text,
  },
  engagementStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statValue: {
    fontSize: 24,
    fontFamily: 'Inter-Bold',
    color: theme.colors.primary,
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: theme.colors.textSecondary,
    textAlign: 'center',
  },
  topicsList: {
    gap: 8,
  },
  topicItem: {
    paddingVertical: 4,
  },
  topicText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: theme.colors.text,
    lineHeight: 20,
  },
  resourcesList: {
    gap: 12,
  },
  resourceItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: theme.colors.surface,
    borderRadius: 8,
    padding: 12,
    gap: 8,
  },
  resourceText: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: theme.colors.primary,
  },
  participantsList: {
    gap: 16,
  },
  participantCard: {
    backgroundColor: theme.colors.card,
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: theme.colors.border,
  },
  participantHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  participantInfo: {
    flex: 1,
  },
  participantName: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: theme.colors.text,
    marginBottom: 2,
  },
  participantEmail: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: theme.colors.textSecondary,
  },
  engagementBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: theme.colors.surface,
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    gap: 4,
  },
  engagementDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  engagementText: {
    fontSize: 12,
    fontFamily: 'Inter-SemiBold',
  },
  participantStats: {
    gap: 8,
    marginBottom: 8,
  },
  statRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statColumn: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    flex: 1,
  },
  statText: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: theme.colors.textSecondary,
  },
  participantTimes: {
    borderTopWidth: 1,
    borderTopColor: theme.colors.border,
    paddingTop: 8,
  },
  timeText: {
    fontSize: 11,
    fontFamily: 'Inter-Regular',
    color: theme.colors.textTertiary,
  },
  topPerformer: {
    alignItems: 'center',
    paddingVertical: 8,
  },
  performerName: {
    fontSize: 18,
    fontFamily: 'Inter-Bold',
    color: theme.colors.text,
    marginBottom: 4,
  },
  performerScore: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: theme.colors.primary,
    marginBottom: 4,
  },
  performerDetails: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: theme.colors.textSecondary,
    textAlign: 'center',
  },
  insightsList: {
    gap: 12,
  },
  insightItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: theme.colors.border,
  },
  insightLabel: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: theme.colors.text,
  },
  insightValue: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: theme.colors.primary,
  },
  recommendationsList: {
    gap: 8,
  },
  recommendationItem: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: theme.colors.text,
    lineHeight: 20,
  },
  actionsList: {
    gap: 8,
  },
  actionItem: {
    paddingVertical: 4,
  },
  actionText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: theme.colors.text,
    lineHeight: 20,
  },
  decisionsList: {
    gap: 8,
  },
  decisionItem: {
    paddingVertical: 4,
  },
  decisionText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: theme.colors.text,
    lineHeight: 20,
  },
  nextMeeting: {
    backgroundColor: theme.colors.surface,
    borderRadius: 8,
    padding: 12,
  },
  nextMeetingText: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: theme.colors.text,
    textAlign: 'center',
  },
});